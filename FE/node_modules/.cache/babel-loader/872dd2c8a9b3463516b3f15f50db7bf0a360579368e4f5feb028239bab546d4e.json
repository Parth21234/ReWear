{"ast":null,"code":"var _jsxFileName = \"/Users/sanjayjaiswal/Desktop/store/ReWear/FE/src/contexts/SwapContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SwapContext = /*#__PURE__*/createContext();\nexport const useSwaps = () => {\n  _s();\n  const context = useContext(SwapContext);\n  if (!context) {\n    throw new Error('useSwaps must be used within a SwapProvider');\n  }\n  return context;\n};\n_s(useSwaps, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SwapProvider = ({\n  children\n}) => {\n  _s2();\n  const [swaps, setSwaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fetchUserSwaps = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/api/swaps');\n      if (response.data.success) {\n        setSwaps(response.data.data);\n      } else {\n        toast.error('Failed to fetch swaps');\n      }\n    } catch (error) {\n      console.error('Error fetching swaps:', error);\n      toast.error('Failed to fetch swaps');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createSwapRequest = async (itemId, message) => {\n    try {\n      const response = await axios.post('/api/swaps', {\n        itemId,\n        message\n      });\n      if (response.data.success) {\n        setSwaps(prev => [response.data.data, ...prev]);\n        toast.success('Swap request sent successfully!');\n        return {\n          success: true\n        };\n      } else {\n        toast.error(response.data.message || 'Failed to send swap request');\n        return {\n          success: false,\n          message: response.data.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to send swap request';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const updateSwapStatus = async (swapId, status) => {\n    try {\n      const response = await axios.put(`/api/swaps/${swapId}`, {\n        status\n      });\n      if (response.data.success) {\n        setSwaps(prev => prev.map(swap => swap._id === swapId ? response.data.data : swap));\n        toast.success(`Swap ${status} successfully!`);\n        return {\n          success: true\n        };\n      } else {\n        toast.error(response.data.message || 'Failed to update swap status');\n        return {\n          success: false,\n          message: response.data.message\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to update swap status';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const value = {\n    swaps,\n    loading,\n    fetchUserSwaps,\n    createSwapRequest,\n    updateSwapStatus\n  };\n  return /*#__PURE__*/_jsxDEV(SwapContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s2(SwapProvider, \"x+wBPlVYnZMEBBbV28tfyVHtZP4=\");\n_c = SwapProvider;\nvar _c;\n$RefreshReg$(_c, \"SwapProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","toast","jsxDEV","_jsxDEV","SwapContext","useSwaps","_s","context","Error","SwapProvider","children","_s2","swaps","setSwaps","loading","setLoading","fetchUserSwaps","response","get","data","success","error","console","createSwapRequest","itemId","message","post","prev","_error$response","_error$response$data","updateSwapStatus","swapId","status","put","map","swap","_id","_error$response2","_error$response2$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sanjayjaiswal/Desktop/store/ReWear/FE/src/contexts/SwapContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst SwapContext = createContext();\n\nexport const useSwaps = () => {\n  const context = useContext(SwapContext);\n  if (!context) {\n    throw new Error('useSwaps must be used within a SwapProvider');\n  }\n  return context;\n};\n\nexport const SwapProvider = ({ children }) => {\n  const [swaps, setSwaps] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchUserSwaps = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get('/api/swaps');\n      if (response.data.success) {\n        setSwaps(response.data.data);\n      } else {\n        toast.error('Failed to fetch swaps');\n      }\n    } catch (error) {\n      console.error('Error fetching swaps:', error);\n      toast.error('Failed to fetch swaps');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createSwapRequest = async (itemId, message) => {\n    try {\n      const response = await axios.post('/api/swaps', {\n        itemId,\n        message\n      });\n      if (response.data.success) {\n        setSwaps(prev => [response.data.data, ...prev]);\n        toast.success('Swap request sent successfully!');\n        return { success: true };\n      } else {\n        toast.error(response.data.message || 'Failed to send swap request');\n        return { success: false, message: response.data.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Failed to send swap request';\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  const updateSwapStatus = async (swapId, status) => {\n    try {\n      const response = await axios.put(`/api/swaps/${swapId}`, { status });\n      if (response.data.success) {\n        setSwaps(prev => prev.map(swap => \n          swap._id === swapId ? response.data.data : swap\n        ));\n        toast.success(`Swap ${status} successfully!`);\n        return { success: true };\n      } else {\n        toast.error(response.data.message || 'Failed to update swap status');\n        return { success: false, message: response.data.message };\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Failed to update swap status';\n      toast.error(message);\n      return { success: false, message };\n    }\n  };\n\n  const value = {\n    swaps,\n    loading,\n    fetchUserSwaps,\n    createSwapRequest,\n    updateSwapStatus\n  };\n\n  return (\n    <SwapContext.Provider value={value}>\n      {children}\n    </SwapContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}